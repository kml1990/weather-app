{"version":3,"sources":["di/DependencyContext.tsx","utils/settings/Config.ts","api/ForecastApi.ts","dailyForecast/DailyForecast.ts","utils/date/DateUtil.ts","di/DependencyType.ts","dailyForecast/DailyForecastFactory.ts","location/Location.ts","location/LocationFactory.ts","forecast/Forecast.ts","forecast/ForecastFactory.ts","location/LocationService.ts","forecast/ForecastService.ts","di/Dependencies.ts","di/DependencyService.ts","utils/settings/AppSettings.ts","components/card/Card.tsx","components/common/temperature/Temperature.tsx","components/common/location/Location.tsx","components/common/currentTime/CurrentTime.tsx","components/forecast/currentForecast/CurrentForecast.tsx","components/common/progressBar/ProgressBar.tsx","components/forecast/forecastReloadProgress/ForecastReloadProgress.tsx","components/common/weatherConditions/WeatherConditions.tsx","components/forecast/dailyForecast/DailyForecastItem.tsx","components/forecast/dailyForecast/DailyForecastList.tsx","components/card/CardHeader.tsx","components/card/CardBody.tsx","components/app/App.tsx","di/DependencyHook.ts","index.tsx"],"names":["DependencyContext","createContext","DependencyProvider","children","container","Provider","value","appConfig","api","API_KEY_PARAM","API_KEY_VALUE","process","BASE_URL","IMAGE_BASE_URL","timing","ONE_SECOND_IN_MS","WEATHER_RELOAD_FREQUENCY_IN_MS","TEMPERATURE_COUNT_UP_SPEED_IN_MS","CSS_TRANSITION_DELAY","texts","UNABLE_TO_LOAD_APP","CONDITION_IMAGE_ALT_TEXT","ERROR_LOADING_FORECAST","location","DEFAULT_LOCATION","LONDON_CORDS","lat","lon","temperature","DEFAULT_UNITS","CELCIUS_SYMBOL","DEFAULT_TEMPERATURE","progress","PROGRESS_MESSAGE","PROGRESS_UNIT","misc","ROOT_ID","DEFAULT_DAILY_FORECAST","ICON_EXT","ForecastApi","injectable","units","axios","get","params","then","response","data","catch","DailyForecast","dailyForecast","_day","_temperature","_condition","_icon","day","condition","icon","this","DateUtil","epoch","moment","unix","date","isSame","Date","format","DependencyType","ForecastService","Symbol","for","LocationService","ForecastFactory","LocationFactory","DailyForecastFactory","inject","dateUtil","forecastDto","daily","reduce","dailyForecasts","dailyForecastDto","dt","dayTemperature","temp","weather","description","forecastDay","getDateFromEpoch","isCurrentDay","length","dayOfWeek","extractDayFromDate","Math","floor","push","Location","_lat","_lon","DEFAULT_FORECAST_CONFIG","currentTemperature","Forecast","forecast","_currentTemperature","_dailyForecasts","_location","locationFactory","dailyForecastFactory","current","create","_currentLocation","forecastFactory","locationService","forecastApi","_forecast","currentLocation","getCurrentLocation","fetchForecast","setForecastLocation","setCurrentLocation","dependenciesContainer","Container","dependencies","ContainerModule","bind","to","inSingletonScope","DependencyService","load","AppSettings","configureAxiosInterceptor","defaults","interceptors","request","use","config","error","Promise","reject","Card","React","memo","className","Temperature","useState","temperatureCounter","setTemperatureCounter","useEffect","timeout","setTimeout","prevTime","clearTimeout","temperatureText","CurrentTime","currentTime","setCurrentTime","time","parseZone","CurrentForecast","ProgressBar","style","width","ForecastReloadProgress","trigger","reloadFrequencyInSeconds","timer","setTimer","interval","setInterval","clearInterval","text","WeatherConditions","imageSource","src","alt","DailyForecastItem","DailyForecastList","show","setShow","dailyForecastsItems","map","index","key","CSSTransition","in","classNames","CardHeader","CardBody","App","forecastService","identifier","useContext","Error","useInjection","setForecast","loadForecast","getForecast","results","loadDependencies","configureApp","ReactDOM","render","document","getElementById","console","message"],"mappings":"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","file":"static/js/main.cbf53acd.chunk.js","sourcesContent":["import React, { createContext } from 'react';\r\nimport { Container } from 'inversify';\r\n\r\nexport const DependencyContext = createContext<Container | null>(null);\r\n\r\nexport interface DependenciesProps {\r\n    container: Container;\r\n}\r\n\r\nexport const DependencyProvider: React.FC<DependenciesProps> = ({ children, container }) => {\r\n    return <DependencyContext.Provider value={container}>{children}</DependencyContext.Provider>;\r\n};\r\n","const appConfig = {\r\n    api: {\r\n        API_KEY_PARAM: 'appid',\r\n        API_KEY_VALUE: process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY,\r\n        BASE_URL: 'http://api.openweathermap.org/data/2.5/onecall',\r\n        IMAGE_BASE_URL: 'http://openweathermap.org/img/wn/',\r\n    },\r\n    timing: {\r\n        ONE_SECOND_IN_MS: 1000,\r\n        WEATHER_RELOAD_FREQUENCY_IN_MS: 60000,\r\n        TEMPERATURE_COUNT_UP_SPEED_IN_MS: 60,\r\n        CSS_TRANSITION_DELAY: 500,\r\n    },\r\n    texts: {\r\n        UNABLE_TO_LOAD_APP: 'Something went wrong. Error: ',\r\n        CONDITION_IMAGE_ALT_TEXT: 'Weather Icon',\r\n        ERROR_LOADING_FORECAST: 'Unable to load forecast. Error: ',\r\n    },\r\n    location: {\r\n        DEFAULT_LOCATION: 'London',\r\n        LONDON_CORDS: {\r\n            lat: 51.51,\r\n            lon: -0.13,\r\n        },\r\n    },\r\n    temperature: {\r\n        DEFAULT_UNITS: 'metric',\r\n        CELCIUS_SYMBOL: '℃',\r\n        DEFAULT_TEMPERATURE: 0,\r\n    },\r\n    progress: {\r\n        PROGRESS_MESSAGE: 'Reloading in',\r\n        PROGRESS_UNIT: 's',\r\n    },\r\n    misc: {\r\n        ROOT_ID: 'root',\r\n        DEFAULT_DAILY_FORECAST: [],\r\n        ICON_EXT: '.png',\r\n    },\r\n};\r\n\r\nexport default appConfig;\r\n","import axios from 'axios';\r\nimport { injectable } from 'inversify';\r\nimport { ForecastDto } from '../forecast/ForecastDto';\r\nimport Location from '../location/Location';\r\nimport appConfig from '../utils/settings/Config';\r\n\r\n@injectable()\r\nexport default class ForecastApi {\r\n    fetchForecast(location: Location, units = appConfig.temperature.DEFAULT_UNITS): Promise<ForecastDto | undefined> {\r\n        const { lat, lon } = location;\r\n        return axios\r\n            .get<ForecastDto>(appConfig.api.BASE_URL, {\r\n                params: {\r\n                    lat,\r\n                    lon,\r\n                    units,\r\n                },\r\n            })\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(() => {\r\n                return undefined;\r\n            });\r\n    }\r\n}\r\n","export interface DailyForecastParams {\r\n    day: string;\r\n    temperature: number;\r\n    condition: string;\r\n    icon: string;\r\n}\r\n\r\nexport default class DailyForecast {\r\n    private readonly _day: string;\r\n\r\n    private readonly _temperature: number;\r\n\r\n    private readonly _condition: string;\r\n\r\n    private readonly _icon: string;\r\n\r\n    constructor(dailyForecast: DailyForecastParams) {\r\n        const { day, temperature, condition, icon } = dailyForecast;\r\n        this._day = day;\r\n        this._temperature = temperature;\r\n        this._condition = condition;\r\n        this._icon = icon;\r\n    }\r\n\r\n    get day() {\r\n        return this._day;\r\n    }\r\n\r\n    get temperature() {\r\n        return this._temperature;\r\n    }\r\n\r\n    get condition() {\r\n        return this._condition;\r\n    }\r\n\r\n    get icon() {\r\n        return this._icon;\r\n    }\r\n}\r\n","import { injectable } from 'inversify';\r\nimport moment, { Moment } from 'moment';\r\n\r\n@injectable()\r\nexport default class DateUtil {\r\n    getDateFromEpoch(epoch: number): Moment {\r\n        return moment.unix(epoch);\r\n    }\r\n\r\n    isCurrentDay<T>(date: T): boolean {\r\n        return moment(date).isSame(new Date(), 'day');\r\n    }\r\n\r\n    extractDayFromDate<T>(date: T): string {\r\n        return moment(date).format('ddd');\r\n    }\r\n}","const DependencyType = {\r\n    ForecastService: Symbol.for('ForecastService'),\r\n    LocationService: Symbol.for('LocationService'),\r\n    ForecastApi: Symbol.for('ForecastApi'),\r\n    ForecastFactory: Symbol.for('ForecastFactory'),\r\n    LocationFactory: Symbol.for('LocationFactory'),\r\n    DailyForecastFactory: Symbol.for('DailyForecastFactory'),\r\n    DateUtil: Symbol.for('DateUtil'),\r\n};\r\n\r\nexport default DependencyType;\r\n","import { inject, injectable } from 'inversify';\r\nimport { Moment } from 'moment';\r\nimport DailyForecast from './DailyForecast';\r\nimport { DailyForecastDto, ForecastDto } from '../forecast/ForecastDto';\r\nimport DateUtil from '../utils/date/DateUtil';\r\nimport DependencyType from '../di/DependencyType';\r\n\r\nconst MAX_DAYS_IN_FORECAST = 5;\r\n@injectable()\r\nexport default class DailyForecastFactory {\r\n    private readonly dateUtil: DateUtil;\r\n\r\n    constructor(@inject(DependencyType.DateUtil) dateUtil: DateUtil) {\r\n        this.dateUtil = dateUtil;\r\n    }\r\n\r\n    create(forecastDto: ForecastDto): DailyForecast[] {\r\n        const { daily } = forecastDto;\r\n\r\n        return daily.reduce((dailyForecasts: DailyForecast[], dailyForecastDto: DailyForecastDto) => {\r\n            const {\r\n                dt: epoch,\r\n                temp: { day: dayTemperature },\r\n                weather: [{ description: condition, icon }],\r\n            } = dailyForecastDto;\r\n\r\n            const forecastDay = this.dateUtil.getDateFromEpoch(epoch);\r\n            const isCurrentDay = this.dateUtil.isCurrentDay<Moment>(forecastDay);\r\n\r\n            if (dailyForecasts.length < MAX_DAYS_IN_FORECAST && !isCurrentDay) {\r\n                const dayOfWeek = this.dateUtil.extractDayFromDate<Moment>(forecastDay);\r\n                const temperature = Math.floor(dayTemperature);\r\n                const dailyForecast = new DailyForecast({ day: dayOfWeek, temperature, condition, icon });\r\n\r\n                dailyForecasts.push(dailyForecast);\r\n            }\r\n\r\n            return dailyForecasts;\r\n        }, []);\r\n    }\r\n}\r\n","export interface LocationParams {\r\n    lat: number;\r\n    lon: number;\r\n}\r\n\r\nexport default class Location {\r\n    private readonly _lat: number;\r\n\r\n    private readonly _lon: number;\r\n\r\n    constructor(location: LocationParams) {\r\n        const { lat, lon } = location;\r\n        this._lat = lat;\r\n        this._lon = lon;\r\n    }\r\n\r\n    get lat(): number {\r\n        return this._lat;\r\n    }\r\n\r\n    get lon(): number {\r\n        return this._lon;\r\n    }\r\n}","import { injectable } from 'inversify';\r\nimport Location from './Location';\r\nimport { ForecastDto } from '../forecast/ForecastDto';\r\n\r\n@injectable()\r\nexport default class LocationFactory {\r\n    create(forecastDto: ForecastDto): Location {\r\n        const { lat, lon } = forecastDto;\r\n\r\n        return new Location({ lat, lon });\r\n    }\r\n}","import DailyForecast from '../dailyForecast/DailyForecast';\r\nimport Location from '../location/Location';\r\nimport appConfig from '../utils/settings/Config';\r\n\r\nexport interface ForecastParams {\r\n    currentTemperature: number;\r\n    dailyForecasts: DailyForecast[];\r\n    location: Location;\r\n}\r\n\r\nexport const DEFAULT_FORECAST_CONFIG = {\r\n    currentTemperature: 0,\r\n    dailyForecasts: [],\r\n    location: new Location(appConfig.location.LONDON_CORDS),\r\n};\r\n\r\nexport default class Forecast {\r\n    private readonly _currentTemperature: number;\r\n\r\n    private readonly _dailyForecasts: DailyForecast[];\r\n\r\n    private readonly _location: Location;\r\n\r\n    constructor(forecast: ForecastParams) {\r\n        const { currentTemperature, dailyForecasts, location } = forecast;\r\n\r\n        this._currentTemperature = currentTemperature;\r\n        this._dailyForecasts = dailyForecasts;\r\n        this._location = location;\r\n    }\r\n\r\n    get currentTemperature(): number {\r\n        return this._currentTemperature;\r\n    }\r\n\r\n    get dailyForecasts(): DailyForecast[] {\r\n        return this._dailyForecasts;\r\n    }\r\n\r\n    get location(): Location {\r\n        return this._location;\r\n    }\r\n}\r\n","import { inject, injectable } from 'inversify';\r\nimport DailyForecastFactory from '../dailyForecast/DailyForecastFactory';\r\nimport DependencyType from '../di/DependencyType';\r\nimport LocationFactory from '../location/LocationFactory';\r\nimport Forecast from './Forecast';\r\nimport { ForecastDto } from './ForecastDto';\r\n\r\n@injectable()\r\nexport default class ForecastFactory {\r\n    private readonly locationFactory: LocationFactory;\r\n\r\n    private readonly dailyForecastFactory: DailyForecastFactory;\r\n\r\n    constructor(\r\n        @inject(DependencyType.LocationFactory) locationFactory: LocationFactory,\r\n        @inject(DependencyType.DailyForecastFactory) dailyForecastFactory: DailyForecastFactory,\r\n    ) {\r\n        this.locationFactory = locationFactory;\r\n        this.dailyForecastFactory = dailyForecastFactory;\r\n    }\r\n\r\n    create(forecastDto: ForecastDto): Forecast {\r\n        const {\r\n            current: { temp },\r\n        } = forecastDto;\r\n\r\n        const currentTemperature = Math.floor(temp);\r\n\r\n        const dailyForecasts = this.dailyForecastFactory.create(forecastDto);\r\n        const location = this.locationFactory.create(forecastDto);\r\n\r\n        return new Forecast({ currentTemperature, dailyForecasts, location });\r\n    }\r\n}\r\n","import { injectable } from 'inversify';\r\nimport appConfig from '../utils/settings/Config';\r\nimport Location from './Location';\r\n@injectable()\r\nexport default class LocationService {\r\n    private _currentLocation: Location;\r\n\r\n    constructor() {\r\n        this._currentLocation = new Location(appConfig.location.LONDON_CORDS);\r\n    }\r\n\r\n    getCurrentLocation(): Location {\r\n        return this._currentLocation;\r\n    }\r\n\r\n    setCurrentLocation(location: Location) {\r\n        this._currentLocation = location;\r\n    }\r\n}\r\n","import { inject, injectable } from 'inversify';\r\nimport ForecastApi from '../api/ForecastApi';\r\nimport DependencyType from '../di/DependencyType';\r\nimport Location from '../location/Location';\r\nimport LocationService from '../location/LocationService';\r\nimport Forecast, { DEFAULT_FORECAST_CONFIG } from './Forecast';\r\nimport { ForecastDto } from './ForecastDto';\r\nimport ForecastFactory from './ForecastFactory';\r\n\r\n@injectable()\r\nexport default class ForecastService {\r\n    private readonly forecastFactory: ForecastFactory;\r\n\r\n    private readonly locationService: LocationService;\r\n\r\n    private readonly forecastApi: ForecastApi;\r\n\r\n    private _forecast: Forecast;\r\n\r\n    constructor(\r\n        @inject(DependencyType.ForecastFactory) forecastFactory: ForecastFactory,\r\n        @inject(DependencyType.LocationService) locationService: LocationService,\r\n        @inject(DependencyType.ForecastApi) forecastApi: ForecastApi,\r\n    ) {\r\n        this.forecastFactory = forecastFactory;\r\n        this.locationService = locationService;\r\n        this.forecastApi = forecastApi;\r\n        this._forecast = new Forecast(DEFAULT_FORECAST_CONFIG);\r\n    }\r\n\r\n    getForecast(): Promise<Forecast> {\r\n        const currentLocation = this.locationService.getCurrentLocation();\r\n        return this.forecastApi\r\n            .fetchForecast(currentLocation)\r\n            .then((forecastDto: ForecastDto | undefined) => {\r\n                if (!forecastDto) {\r\n                    return this._forecast;\r\n                }\r\n                const forecast = this.forecastFactory.create(forecastDto);\r\n                this.setForecastLocation(forecast.location);\r\n                this._forecast = forecast;\r\n                return forecast;\r\n            })\r\n            .catch(() => {\r\n                return this._forecast;\r\n            });\r\n    }\r\n\r\n    private setForecastLocation(location: Location) {\r\n        this.locationService.setCurrentLocation(location);\r\n    }\r\n}\r\n","import { Container, ContainerModule, interfaces } from 'inversify';\r\nimport ForecastApi from '../api/ForecastApi';\r\nimport DailyForecastFactory from '../dailyForecast/DailyForecastFactory';\r\nimport ForecastFactory from '../forecast/ForecastFactory';\r\nimport ForecastService from '../forecast/ForecastService';\r\nimport LocationFactory from '../location/LocationFactory';\r\nimport LocationService from '../location/LocationService';\r\nimport DateUtil from '../utils/date/DateUtil';\r\nimport DependencyType from './DependencyType';\r\n\r\nexport const dependenciesContainer = new Container();\r\n\r\nexport const dependencies = new ContainerModule((bind: interfaces.Bind) => {\r\n    bind<ForecastService>(DependencyType.ForecastService)\r\n        .to(ForecastService)\r\n        .inSingletonScope();\r\n    bind<LocationService>(DependencyType.LocationService)\r\n        .to(LocationService)\r\n        .inSingletonScope();\r\n    bind<ForecastApi>(DependencyType.ForecastApi)\r\n        .to(ForecastApi)\r\n        .inSingletonScope();\r\n    bind<ForecastFactory>(DependencyType.ForecastFactory)\r\n        .to(ForecastFactory)\r\n        .inSingletonScope();\r\n    bind<LocationFactory>(DependencyType.LocationFactory)\r\n        .to(LocationFactory)\r\n        .inSingletonScope();\r\n    bind<DailyForecastFactory>(DependencyType.DailyForecastFactory)\r\n        .to(DailyForecastFactory)\r\n        .inSingletonScope();\r\n    bind<DateUtil>(DependencyType.DateUtil)\r\n        .to(DateUtil)\r\n        .inSingletonScope();\r\n});\r\n","import { Container } from 'inversify';\r\nimport { dependencies, dependenciesContainer } from './Dependencies';\r\n\r\nexport default class DependencyService {\r\n    async loadDependencies(): Promise<Container> {\r\n        dependenciesContainer.load(dependencies);\r\n        return dependenciesContainer;\r\n    }\r\n}\r\n","import axios, { AxiosRequestConfig } from 'axios';\r\nimport appConfig from './Config';\r\n\r\nexport default class AppSettings {\r\n    configureApp() {\r\n        this.configureAxiosInterceptor();\r\n    }\r\n\r\n    private configureAxiosInterceptor() {\r\n        axios.defaults.params = {};\r\n        axios.interceptors.request.use(\r\n            (config: AxiosRequestConfig) => {\r\n                config.params[appConfig.api.API_KEY_PARAM] = appConfig.api.API_KEY_VALUE;\r\n                return config;\r\n            },\r\n            (error: Error) => {\r\n                return Promise.reject(error);\r\n            },\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport './Card.scss';\r\n\r\nconst Card: React.FC = React.memo(({ children }) => {\r\n    return <div className=\"Card\">{children}</div>;\r\n});\r\n\r\nexport default Card;\r\n","import React, { useEffect, useState } from 'react';\r\nimport appConfig from '../../../utils/settings/Config';\r\n\r\nexport interface TemperatureProps {\r\n    temperature: number;\r\n    className?: string;\r\n}\r\n\r\nconst Temperature: React.FC<TemperatureProps> = ({ temperature, className = '' }) => {\r\n    const [temperatureCounter, setTemperatureCounter] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            if (temperatureCounter < temperature) {\r\n                setTemperatureCounter(prevTime => prevTime + 1);\r\n            }\r\n        }, appConfig.timing.TEMPERATURE_COUNT_UP_SPEED_IN_MS);\r\n        return () => clearTimeout(timeout);\r\n    });\r\n\r\n    useEffect(() => {\r\n        setTemperatureCounter(0);\r\n    }, [temperature]);\r\n\r\n    const temperatureText = `${temperatureCounter} ${appConfig.temperature.CELCIUS_SYMBOL}`;\r\n\r\n    return <span className={`Temperature ${className}`}>{temperatureText}</span>;\r\n};\r\n\r\nexport default Temperature;\r\n","import React from 'react';\r\n\r\nexport interface LocationProps {\r\n    location: string;\r\n    className?: string;\r\n}\r\n\r\nconst Location: React.FC<LocationProps> = ({ location, className = '' }) => {\r\n    return <span className={`Location ${className}`}>{location}</span>;\r\n};\r\n\r\nexport default Location;\r\n","import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport './CurrentTime.scss';\r\n\r\nconst CurrentTime: React.FC = () => {\r\n    const [currentTime, setCurrentTime] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        const time = moment.parseZone(moment().format()).format('HH:mm z');\r\n        setCurrentTime(time);\r\n    });\r\n\r\n    return (\r\n        <div className=\"CurrentTime\">\r\n            <span className=\"CurrentTime__text\">{currentTime}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentTime;\r\n","import React from 'react';\r\nimport Temperature from '../../common/temperature/Temperature';\r\nimport Location from '../../common/location/Location';\r\nimport CurrentTime from '../../common/currentTime/CurrentTime';\r\nimport appConfig from '../../../utils/settings/Config';\r\n\r\nimport './CurrentForecast.scss';\r\n\r\nexport interface CurrentForecastProps {\r\n    currentTemperature: number;\r\n}\r\n\r\nconst CurrentForecast: React.FC<CurrentForecastProps> = ({ currentTemperature }) => {\r\n    return (\r\n        <section className=\"CurrentForecast\">\r\n            <Location className=\"CurrentForecast__location\" location={appConfig.location.DEFAULT_LOCATION} />\r\n            <CurrentTime />\r\n            <Temperature className=\"CurrentForecast__temperature\" temperature={currentTemperature} />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default CurrentForecast;\r\n","import React from 'react';\r\n\r\nimport './ProgressBar.scss';\r\n\r\nexport interface ProgressBarProps {\r\n    progress: number;\r\n    className?: string;\r\n}\r\n\r\nconst ProgressBar: React.FC<ProgressBarProps> = ({ progress, className = '' }) => {\r\n    return (\r\n        <span className={`ProgressBar ${className}`}>\r\n            <span className=\"ProgressBar__rail\" style={{ width: `${progress}%` }}>\r\n                <span className=\"ProgressBar__bar\" />\r\n            </span>\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useEffect, useState } from 'react';\r\nimport appConfig from '../../../utils/settings/Config';\r\nimport ProgressBar from '../../common/progressBar/ProgressBar';\r\n\r\nimport './ForecastReloadProgress.scss';\r\n\r\nexport interface ForecastReloadProgressProps {\r\n    trigger: any;\r\n    reloadFrequencyInSeconds: number;\r\n}\r\n\r\nconst ForecastReloadProgress: React.FC<ForecastReloadProgressProps> = ({ trigger, reloadFrequencyInSeconds }) => {\r\n    const [timer, setTimer] = useState<number>(reloadFrequencyInSeconds);\r\n\r\n    const resetTimer = () => {\r\n        setTimer(reloadFrequencyInSeconds);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTimer(prevTime => {\r\n                if (prevTime > 0) {\r\n                    return prevTime - 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }, appConfig.timing.ONE_SECOND_IN_MS);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        resetTimer();\r\n    }, [trigger]);\r\n\r\n    const progress = (timer / reloadFrequencyInSeconds) * 100;\r\n    const text = `${appConfig.progress.PROGRESS_MESSAGE} ${timer}${appConfig.progress.PROGRESS_UNIT}`;\r\n\r\n    return (\r\n        <section className=\"ForecastReloadProgress\">\r\n            <span className=\"ForecastReloadProgress__text\">{text}</span>\r\n            <ProgressBar progress={progress} className=\"ForecastReloadProgress__bar\" />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default ForecastReloadProgress;\r\n","import React from 'react';\r\nimport appConfig from '../../../utils/settings/Config';\r\n\r\nimport './WeatherConditions.scss';\r\n\r\nexport interface WeatherConditionsProps {\r\n    condition: string;\r\n    icon: string;\r\n    className?: string;\r\n}\r\n\r\nconst WeatherConditions: React.FC<WeatherConditionsProps> = ({ condition, icon, className = '' }) => {\r\n    const imageSource = `${appConfig.api.IMAGE_BASE_URL}${icon}${appConfig.misc.ICON_EXT}`;\r\n    return (\r\n        <div className={`WeatherConditions ${className}`}>\r\n            <img\r\n                className=\"WeatherConditions__image\"\r\n                src={imageSource}\r\n                alt={appConfig.texts.CONDITION_IMAGE_ALT_TEXT}\r\n            />\r\n            <span className=\"WeatherConditions__text\">{condition}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherConditions;\r\n","import React from 'react';\r\nimport DailyForecast from '../../../dailyForecast/DailyForecast';\r\nimport Temperature from '../../common/temperature/Temperature';\r\nimport WeatherConditions from '../../common/weatherConditions/WeatherConditions';\r\n\r\nimport './DailyForecastItem.scss';\r\n\r\nexport interface DailyForecastItemProps {\r\n    dailyForecast: DailyForecast;\r\n}\r\n\r\nconst DailyForecastItem: React.FC<DailyForecastItemProps> = ({ dailyForecast }) => {\r\n    const { day, temperature, condition, icon } = dailyForecast;\r\n    return (\r\n        <li className=\"DailyForecastItem\">\r\n            <span className=\"DailyForecastItem__day\">{day}</span>\r\n            <Temperature className=\"DailyForecastItem__temperature\" temperature={temperature} />\r\n            <WeatherConditions className=\"DailyForecastItem__condition\" condition={condition} icon={icon} />\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default DailyForecastItem;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport DailyForecastItem from './DailyForecastItem';\r\nimport DailyForecast from '../../../dailyForecast/DailyForecast';\r\nimport appConfig from '../../../utils/settings/Config';\r\n\r\nimport './DailyForecastList.scss';\r\n\r\nexport interface DailyForecastListProps {\r\n    dailyForecasts: DailyForecast[];\r\n}\r\n\r\nconst DailyForecastList: React.FC<DailyForecastListProps> = ({ dailyForecasts }) => {\r\n    const [show, setShow] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (dailyForecasts.length === 0) {\r\n            setShow(false);\r\n            return;\r\n        }\r\n        setShow(true);\r\n    }, [dailyForecasts]);\r\n\r\n    const dailyForecastsItems = dailyForecasts.map((dailyForecast, index) => {\r\n        const key = `${dailyForecast.day}-${index}`;\r\n        return (\r\n            <CSSTransition\r\n                key={key}\r\n                in={show}\r\n                timeout={appConfig.timing.CSS_TRANSITION_DELAY}\r\n                classNames=\"DailyForecastList__item\"\r\n            >\r\n                <DailyForecastItem dailyForecast={dailyForecast} />\r\n            </CSSTransition>\r\n        );\r\n    });\r\n\r\n    return <ul className=\"DailyForecastList\">{dailyForecastsItems}</ul>;\r\n};\r\n\r\nexport default DailyForecastList;\r\n","import React from 'react';\r\n\r\nimport './CardHeader.scss';\r\n\r\nconst CardHeader: React.FC = React.memo(({ children }) => {\r\n    return <header className=\"CardHeader\">{children}</header>;\r\n});\r\n\r\nexport default CardHeader;\r\n","import React from 'react';\r\n\r\nimport './CardBody.scss';\r\n\r\nconst CardBody: React.FC = React.memo(({ children }) => {\r\n    return <main className=\"CardBody\">{children}</main>;\r\n});\r\n\r\nexport default CardBody;\r\n","import React, { useEffect, useState } from 'react';\nimport Card from '../card/Card';\nimport useInjection from '../../di/DependencyHook';\nimport DependencyType from '../../di/DependencyType';\nimport ForecastService from '../../forecast/ForecastService';\nimport Forecast from '../../forecast/Forecast';\nimport CurrentForecast from '../forecast/currentForecast/CurrentForecast';\nimport ForecastReloadProgress from '../forecast/forecastReloadProgress/ForecastReloadProgress';\nimport DailyForecasts from '../forecast/dailyForecast/DailyForecastList';\nimport CardHeader from '../card/CardHeader';\nimport CardBody from '../card/CardBody';\nimport appConfig from '../../utils/settings/Config';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n    const forecastService = useInjection<ForecastService>(DependencyType.ForecastService);\n    const [forecast, setForecast] = useState<Forecast | null>(null);\n\n    const reloadFrequencyInSeconds =\n        appConfig.timing.WEATHER_RELOAD_FREQUENCY_IN_MS / appConfig.timing.ONE_SECOND_IN_MS;\n\n    const resetForecast = () => {\n        setForecast(null);\n    };\n\n    const loadForecast = () => {\n        forecastService.getForecast().then(results => {\n            setForecast(results);\n        });\n    };\n\n    useEffect(() => {\n        if (forecast === null) {\n            loadForecast();\n        }\n        const interval = setInterval(() => {\n            resetForecast();\n            loadForecast();\n        }, appConfig.timing.WEATHER_RELOAD_FREQUENCY_IN_MS);\n        return () => clearInterval(interval);\n    }, []);\n\n    const dailyForecasts = (forecast && forecast.dailyForecasts) || appConfig.misc.DEFAULT_DAILY_FORECAST;\n    const currentTemperature = (forecast && forecast.currentTemperature) || appConfig.temperature.DEFAULT_TEMPERATURE;\n\n    return (\n        <div className=\"App\">\n            <Card>\n                <CardHeader>\n                    <CurrentForecast currentTemperature={currentTemperature} />\n                    <ForecastReloadProgress trigger={forecast} reloadFrequencyInSeconds={reloadFrequencyInSeconds} />\n                </CardHeader>\n                <CardBody>\n                    <DailyForecasts dailyForecasts={dailyForecasts} />\n                </CardBody>\n            </Card>\n        </div>\n    );\n};\n\nexport default App;\n","import { useContext } from 'react';\r\nimport { interfaces } from 'inversify';\r\nimport { DependencyContext } from './DependencyContext';\r\n\r\nexport default function useInjection<T>(identifier: interfaces.ServiceIdentifier<T>) {\r\n    const container = useContext(DependencyContext);\r\n    if (container === null) {\r\n        throw new Error(`The dependency container should be defined`);\r\n    }\r\n    return container.get<T>(identifier);\r\n}\r\n","import { Container } from 'inversify';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'reflect-metadata';\nimport { DependencyProvider } from './di/DependencyContext';\nimport DependencyService from './di/DependencyService';\nimport appConfig from './utils/settings/Config';\nimport AppSettings from './utils/settings/AppSettings';\nimport App from './components/app/App';\n\nimport './index.scss';\n\nconst dependencyService = new DependencyService();\n\ndependencyService\n    .loadDependencies()\n    .then((dependenciesContainer: Container) => {\n        const appSettings = new AppSettings();\n        appSettings.configureApp();\n\n        ReactDOM.render(\n            <DependencyProvider container={dependenciesContainer}>\n                <App />\n            </DependencyProvider>,\n            document.getElementById(appConfig.misc.ROOT_ID),\n        );\n    })\n    .catch((error: Error) => {\n        console.error(appConfig.texts.UNABLE_TO_LOAD_APP, error.message);\n    });\n"],"sourceRoot":""}